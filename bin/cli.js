#!/usr/bin/env node
"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var s=e(require("meow")),o=e(require("chalk")),r=e(require("boxen")),t=e(require("util")),n=e(require("listr")),i=e(require("path")),a=e(require("execa")),l=e(require("read-pkg")),u=e(require("semver")),c=function(){return(c=Object.assign||function(e){for(var s,o=1,r=arguments.length;o<r;o++)for(var t in s=arguments[o])Object.prototype.hasOwnProperty.call(s,t)&&(e[t]=s[t]);return e}).apply(this,arguments)};function g(e,s){var o,r,t,n,i={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return n={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function a(n){return function(a){return function(n){if(o)throw new TypeError("Generator is already executing.");for(;i;)try{if(o=1,r&&(t=2&n[0]?r.return:n[0]?r.throw||((t=r.return)&&t.call(r),0):r.next)&&!(t=t.call(r,n[1])).done)return t;switch(r=0,t&&(n=[2&n[0],t.value]),n[0]){case 0:case 1:t=n;break;case 4:return i.label++,{value:n[1],done:!1};case 5:i.label++,r=n[1],n=[0];continue;case 7:n=i.ops.pop(),i.trys.pop();continue;default:if(!(t=(t=i.trys).length>0&&t[t.length-1])&&(6===n[0]||2===n[0])){i=0;continue}if(3===n[0]&&(!t||n[1]>t[0]&&n[1]<t[3])){i.label=n[1];break}if(6===n[0]&&i.label<t[1]){i.label=t[1],t=n;break}if(t&&i.label<t[2]){i.label=t[2],i.ops.push(n);break}t[2]&&i.ops.pop(),i.trys.pop();continue}n=s.call(e,i)}catch(e){n=[6,e],r=0}finally{o=t=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,a])}}}var d=function(){function e(e){this.results={};var s={debug:!1,cwd:process.cwd(),ignoreLocal:!0,silent:!0};this.options=c({},s,e),this.tasks=new n({renderer:this.options.debug?"verbose":this.options.silent?"silent":"default",concurrent:!1,exitOnError:!1}),this.options.ignoreLocal&&this.ignoreLocal(),this.options.engines||this.findEngines(),this.buildTasks()}return e.prototype.run=function(){return e=this,s=void 0,r=function(){return g(this,function(e){switch(e.label){case 0:if(!this.tasks)throw new Error("No tasks found!");return[4,this.tasks.run()];case 1:return e.sent(),[2,this.results]}})},new((o=void 0)||(o=Promise))(function(t,n){function i(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){e.done?t(e.value):new o(function(s){s(e.value)}).then(i,a)}l((r=r.apply(e,s||[])).next())});var e,s,o,r},e.prototype.ignoreLocal=function(){var e=process.env.PATH;if(console.log(e),e){var s=i.resolve(this.options.cwd,"node_modules",".bin");console.log(),console.log(s),console.log();var o=new RegExp(":?"+s.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")+":?");console.log(o.source),console.log();var r=e.replace(o,":");console.log(r),console.log(),process.env.PATH=r}},e.prototype.buildTasks=function(){var e=this,s=this.options.engines;if(!s)throw new Error("No engines found!");Object.keys(s).forEach(function(o){var r=s[o];e.addTask(o,r)})},e.prototype.addTask=function(e,s){var r=this;this.results[e]={success:!1,tasks:[]},this.tasks.add({title:"Checking engine: "+o.green(e)+" ("+o.dim(s)+")",task:function(){return new n([{title:"Check availability",task:function(s,o){return r.checkAvailability(s,o,e)}},{title:"Get command version",task:function(s,o){return r.getVersion(s,o,e)}},{title:"Validate range",task:function(o,t){return r.validateVersion(o,t,e,s)}},{title:"Check version against range",task:function(o,t){return r.checkVersion(o,t,e,s)}},{title:o.dim("Update results"),task:function(){return r.results[e].success=!0,Promise.resolve()}}],{exitOnError:!0})}})},e.prototype.findEngines=function(){var e=l.sync({cwd:this.options.cwd});if(!e)throw new Error("No package.json found!");this.options.engines=e.engines},e.prototype.checkAvailability=function(e,s,o){try{var r=a.sync("command",["-v",o],{preferLocal:!1}).stdout;return this.options.debug&&console.log("Command:",r),r.includes(o)?(this.results[o].tasks.push({task:s,success:!0,message:"Executable found!",data:r}),Promise.resolve("Executable found!")):(this.results[o].tasks.push({task:s,success:!1,message:"Executable not found!",data:r}),Promise.reject(new Error("Executable not found!")))}catch(e){return this.options.debug&&console.log(e.message),this.results[o].tasks.push({task:s,success:!1,message:"Error executing program!",data:e}),Promise.reject(new Error("Error executing program!"))}},e.prototype.getVersion=function(e,s,o){try{var r=a.sync(o,["--version"],{preferLocal:!1}).stdout,t=u.coerce(r);if(this.options.debug&&(console.log("Version:",r),console.log("Normalized:",t?t.version:null)),t){var n=u.valid(t.version);if(n)return e.version=n,this.results[o].tasks.push({task:s,success:!0,message:"Got a valid version",data:{version:r,normalized:t,validVersion:n}}),Promise.resolve()}return this.results[o].tasks.push({task:s,success:!1,message:"No valid version found! Please fill in an issue on GitHub.",data:{stdout:r,normalized:t}}),Promise.reject(new Error("No valid version found! Please fill in an issue on GitHub."))}catch(e){return this.options.debug&&console.log(e.message),this.results[o].tasks.push({task:s,success:!1,message:"Error fetching version!",data:e}),Promise.reject(new Error("Error fetching version!"))}},e.prototype.validateVersion=function(e,s,o,r){var t=u.validRange(r);return this.options.debug&&(console.log("Range:",r),console.log("Valid:",t)),t?(this.results[o].tasks.push({task:s,success:!0,message:"This version is valid!",data:{range:r}}),Promise.resolve("This version is valid!")):(this.results[o].tasks.push({task:s,success:!1,message:"This is not a valid version ("+r+")!",data:{range:r}}),Promise.reject(new Error("This is not a valid version ("+r+")!")))},e.prototype.checkVersion=function(e,s,o,r){var t=e.version,n=u.satisfies(t,r);return this.options.debug&&(console.log("Version:",t),console.log("Range:",r),console.log("Satisfies:",n)),n?(this.results[o].tasks.push({task:s,success:!0,message:"Yeah, your program version satisfies the required range!",data:{version:t,range:r,satisfies:n}}),Promise.resolve("Yeah, your program version satisfies the required range!")):(this.results[o].tasks.push({task:s,success:!1,message:"Ooh, the required range ("+r+") does not satisfies your program version ("+t+")!",data:{version:t,range:r,satisfies:n}}),Promise.reject(new Error("Ooh, the required range ("+r+") does not satisfies your program version ("+t+")!")))},e}(),h=require("../package.json").version,p=s("\n    Usage\n    $ supervisor <directory>\n\n    Options\n    --ignoreLocal, -i  Ignore local installed node modules (true)\n\n    --debug     Debug program\n    --version   Show version\n    --help      Show help\n",{flags:{debug:{type:"boolean",default:!1},ignoreLocal:{type:"boolean",alias:"i",default:!0}}}),f=p.flags,v=f.debug,m=f.ignoreLocal,b=p.input[0]||process.cwd();console.log(r(o.green("Supervisor")+" ("+o.dim(h)+")",{padding:{top:1,bottom:1,right:8,left:8},margin:{top:0,bottom:0,right:3,left:3},align:"center",borderColor:"white",dimBorder:!0})+"\n"),new d({silent:!1,ignoreLocal:m,cwd:b,debug:v}).run().then(function(e){Object.values(e).every(function(e){return!0===e.success})?console.log("\n    "+o.green("Yeah!")+"\n    You are ready to go. All engines are compatible\n    with you system environment.\n      "):console.log("\n    "+o.red("Oh, no!")+"\n    Seems like some engines does not satisfies or not\n    exists. You may check them and install the correct\n    version before using this project.\n      "),v&&(console.log(),Object.keys(e).forEach(function(s){console.log(o.bold(s.toUpperCase())),console.log(t.inspect(e[s],{showHidden:!1,depth:3,colors:!0})),console.log()}))});
